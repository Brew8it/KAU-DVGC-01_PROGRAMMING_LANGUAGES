program testok6(input, output);
var id, number, assign: integer;

begin
id := (number + assign) * 2  
end.

 *** In  Parser     
________________________________________________________ 
 THE PROGRAM TEXT
________________________________________________________ 
program testok6(input, output);
var id, number, assign: integer;

begin
id := (number + assign) * 2  
end.
$
________________________________________________________ 
 *** In  program_header 
 *** In  match      expected program found program 
 *** In  match      expected id found testok6 
 *** In  match      expected ( found ( 
 *** In  match      expected input found input 
 *** In  match      expected , found , 
 *** In  match      expected output found output 
 *** In  match      expected ) found ) 
 *** In  match      expected ; found ; 
 *** Out program_header
 
 *** In  var_part   
 *** In  match      expected var found var 
 *** In  var_dec_list 
 *** In  var_dec    
 *** In  id_list    
 *** In  match      expected id found id 
 *** In  match      expected , found , 
 *** In  id_list    
 *** In  match      expected id found number 
 SYNTAX: Symbol expected      id found:  number
 *** Out id_list    
 *** Out id_list    
 *** In  match      expected : found number 
 SYNTAX: Symbol expected       : found:  number
 *** In  type       
SYNTAX:  Type name expected found  number
 *** Out type       
 *** In  match      expected ; found number 
 SYNTAX: Symbol expected       ; found:  number
 *** Out var_dec    
 *** Out var_dec_list 
 *** Out var_part
 
 *** In  stat_part  
 *** In  match      expected begin found number 
 SYNTAX: Symbol expected   begin found:  number
 *** In  stat_list  
 *** In  stat       
 *** In  assign_stat 
 *** In  match      expected id found number 
 SYNTAX: Symbol expected      id found:  number
 *** In  match      expected := found number 
 SYNTAX: Symbol expected      := found:  number
 *** In  expr       
 *** In  term       
 *** In  factor     
 *** In  operand    
 *** In  match      expected number found number 
 *** Out operand    
 *** Out factor     
 *** Out term       
 *** Out expr       
SEMANTIC: Assign types: error := undef
 *** Out assign_stat 
 *** Out stat_list  
 *** In  match      expected end found , 
 SYNTAX: Symbol expected     end found:       ,
 *** In  match      expected . found , 
 SYNTAX: Symbol expected       . found:       ,
 *** Out stat_part
 
________________________________________________________
________________________________________________________
THE SYMBOL TABLE
________________________________________________________
       NAME       ROLE       TYPE       SIZE       ADDR
________________________________________________________
    testok6    program    program          0          0
         id        var      error          0          0
     number        var      error          0          0
________________________________________________________
 STATIC STORAGE REQUIRED is 0 BYTES
________________________________________________________
 
 Parse Failed! 
